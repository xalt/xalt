#-----------------------------------------------------------------------
# XALT: A tool that tracks users jobs and environments on a cluster.
# Copyright (C) 2013-2014 University of Texas at Austin
# Copyright (C) 2013-2014 University of Tennessee
# 
# This library is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of 
# the License, or (at your option) any later version. 
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser  General Public License for more details. 
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free
# Software Foundation, Inc., 59 Temple Place, Suite 330,
# Boston, MA 02111-1307 USA
#-----------------------------------------------------------------------

abs_srcdir        := @abs_srcdir@
srcdir            := @srcdir@
VPATH             := @srcdir@
CURRENT_MK        := $(lastword $(MAKEFILE_LIST))

OS_NAME           := $(shell uname -s)
LIB_OPTIONS       := -fPIC -shared
LDFLAGS           := @LDFLAGS@
ifeq ($(OS_NAME),Darwin)
  LIB_OPTIONS     := -bundle -undefined dynamic_lookup
endif


MY_HOSTNAME_PARSER   	:= @MY_HOSTNAME_PARSER@
OPTLVL               	:= -g -O2 
package              	:= xalt
VERSION              	:= $(shell cat $(srcdir)/.version)
TAR_VERSION             := $(package)-$(package)-$(VERSION)
CRYPTO_STR              := @CRYPTO_STR@
UUID_STR                := @UUID_STR@
CURL_STR                := @CURL_STR@
GPU_STR                 := @GPU_STR@
BROKER_SERVER           := @BROKER_SERVER@
BROKER_URI              := @BROKER_URI@
TRACKING_MPI_ONLY    	:= @XALT_TRACKING_MPI_ONLY@
TRANSMISSION         	:= @TRANSMISSION@
SITE_NAME            	:= @SITE@
SITE_CONTROLLED_PREFIX  := @SITE_CONTROLLED_PREFIX@
ETC_DIR              	:= @ETC_DIR@
prefix               	:= @prefix@
XALT_V               	:= src/util/xalt_version.h
DOT_V               	:= .version
XALT_CONTAINER_SUPPORT  := @XALT_CONTAINER_SUPPORT@
XALT_SYSTEM_PATH        := @SYSTEM_PATH@
SYSLOG_MSG_SZ        	:= @SYSLOG_MSG_SZ@
HAVE_LIBUUID            := @HAVE_WORKING_LIBUUID@
HAVE_DCGM         	:= @HAVE_DCGM@
HAVE_NVML               := @HAVE_NVML@
STATIC_LIBS             := @STATIC_LIBS@
PRELOAD_ONLY            := @PRELOAD_ONLY@	
XALT_LD_LIBRARY_PATH  	:= @XALT_LD_LIBRARY_PATH@
HAVE_32BIT           	:= @HAVE_32BIT@
XALT_INSTALL_OS         := @XALT_INSTALL_OS@
XALT_SYSTEM_PATH        := @SYSTEM_PATH@
PATH_TO_MKTEMP        	:= @PATH_TO_MKTEMP@
PATH_TO_PSTREE       	:= @PATH_TO_PSTREE@
USE_ARGPARSE         	:= @USE_CONTRIB_ARGPARSE@
XALT_FILE_PREFIX     	:= @XALT_FILE_PREFIX@
XALT_LOGGING_URL        := @XALT_LOGGING_URL@
XALT_PRIME_NUMBER     	:= @XALT_PRIME_NUMBER@
XALT_PRIME_FMT     	:= @XALT_PRIME_FMT@
XALT_FUNCTION_TRACKING  := @XALT_FUNCTION_TRACKING@
ENABLE_BACKGROUNDING 	:= @ENABLE_BACKGROUNDING@
XALT_CONFIG_PY       	:= @XALT_CONFIG_PY@
XALT_SPEC               := $(abs_srcdir)/xalt.spec
XALT_SPEC_PATTERN       := $(abs_srcdir)/proj_mgmt/xalt_spec_patternA.lua
CONF_PY                 := $(abs_srcdir)/docs/source/conf.py
CONF_PY_PATTERN         := $(abs_srcdir)/proj_mgmt/conf_py_update_patternA.lua
UPDATE_VERSION          := LUA_PATH="$(abs_srcdir)/proj_mgmt/tools_for_lua/?.lua;$$LUA_PATH;;" $(abs_srcdir)/proj_mgmt/updateVersion
MODE                    := @MODE@

MODE_X := $(shell $(srcdir)/proj_mgmt/convert_mode.sh -x $(MODE))
MODE_R := $(shell $(srcdir)/proj_mgmt/convert_mode.sh -r $(MODE))

GIT_PROG             	:= @PATH_TO_GIT@
ifeq ($(GIT_VERSION),)
  GIT_VERSION          	:= $(shell if [ -n "$(GIT_PROG)" -a -e $(srcdir)/.git ]; then xaltV=`(cd $(srcdir); git describe --always)`; echo "$$xaltV"; else echo "xalt-$(VERSION)"; fi)
endif
VDATE		     	:= $(shell date +'%F %H:%M')

XALT_DIR             	:= $(prefix)/$(package)/$(package)
PKGV                 	:= $(prefix)/$(package)/$(VERSION)
PKG                  	:= $(prefix)/$(package)/$(package)
ifneq ($(SITE_CONTROLLED_PREFIX),no)
  XALT_DIR              := $(prefix)
  PKGV                  := $(prefix)
  PKG                   := $(prefix)
endif
ifeq ($(XALT_USE_32BIT),no)
  HAVE_32BIT := no
endif

INC                  	:= $(PKGV)/include
LIB                  	:= $(PKGV)/lib
LIB64                	:= $(PKGV)/lib64
XALT_CONTAINER_LIBS    	:= $(PKGV)/xalt_container_libs
LIBEXEC              	:= $(PKGV)/libexec
BIN                  	:= $(PKGV)/bin
SBIN                 	:= $(PKGV)/sbin
SITE_PKG_DIR            := $(PKGV)/site_packages
DIRLIST              	:= $(DESTDIR)$(LIBEXEC) $(DESTDIR)$(LIB) $(DESTDIR)$(LIB64)            \
                           $(DESTDIR)$(BIN) $(DESTDIR)$(SBIN) $(DESTDIR)$(ETC_DIR)             \
                           $(DESTDIR)$(INC) $(DESTDIR)$(SITE_PKG_DIR)                          \
                           $(DESTDIR)$(XALT_CONTAINER_LIBS)

SITE_PKG                := py_src/xalt_sitecustomize.py
SITE_PKG                := $(patsubst %, $(srcdir)/%, $(SITE_PKG))

BIN_PKG              	:=                                                                     \
                           sh_src/ld.in                                                        \
                           sh_src/ld.xalt.in                                                   \
                           sh_src/ld.gold.in                                                   \
                           sh_src/ld.bfd.in                                                    \
	                   sh_src/x86_64-linux-gnu-ld.in                                       \
                           sh_src/xalt_helper_functions.sh                                     \
                           sh_src/xalt_extract_record.in                                       \
                           sh_src/xalt_configuration_report.in                                 \
                           sh_src/xalt_print_os.in 
BIN_PKG              	:= $(patsubst %, $(srcdir)/%, $(BIN_PKG))

SBIN_PKG             	:= py_src/conf_create.in.py          py_src/createDB.in.py             \
                           py_src/xalt_syslog_to_db.in.py    py_src/xalt_usage_report.in.py    \
                           py_src/xalt_file_to_db.in.py      py_src/xalt_split_syslog_fn.in.py \
                           py_src/xalt_library_usage.in.py   py_src/ansi.py                    \
                           sh_src/create_xalt_directories.sh.in                                \
                           py_src/xalt_scalar_bins_usage_report.in.py    
SBIN_PKG             	:= $(patsubst %, $(srcdir)/%, $(SBIN_PKG))

RT_PKG                  := proj_mgmt/check_entries_db.in.py
RT_PKG                  := $(patsubst %, $(srcdir)/%, $(RT_PKG))

LIBEXEC_PKG          	:= py_src/XALTdb.py                  py_src/progressBar.py             \
                           py_src/xalt_stack.py              py_src/BeautifulTbl.py            \
                           py_src/xalt_global.py             py_src/Rmap_XALT.py               \
                           py_src/xalt_util.py               py_src/xalt_name_mapping.py
LIBEXEC_PKG          	:= $(patsubst %, $(srcdir)/%, $(LIBEXEC_PKG))


TACC_PKG             	:= contrib/TACC/monthly_report.in    contrib/TACC/fix_records.in       \
                           contrib/TACC/correct_num_cores.in contrib/TACC/kill_dups.in         \
                           contrib/TACC/envReport.in         contrib/TACC/reportQ.in           \
                           contrib/TACC/quarter2months.in    contrib/TACC/build_XALT_report.in \
                           contrib/TACC/store_xalt_data.in   contrib/TACC/xalt_load_fos.in     \
                           contrib/TACC/xalt_directorate.in  contrib/TACC/xalt_fos.in          \
                           contrib/TACC/system_directorate_rpt.in                              \
                           contrib/TACC/process_xalt_file_records.in                           \
                           contrib/TACC/build_default_user_2_account_str.in
TACC_PKG             	:= $(patsubst %, $(srcdir)/%, $(TACC_PKG))

OBFUSCATE_HDR           := src/util/xalt_obfuscate.h
OBFUSCATE_HDR           := $(patsubst %, $(srcdir)/%, $(OBFUSCATE_HDR))


.PHONY: LINKS build_compiled

all:
	@echo done

install: $(DIRLIST) LINKS Inst_site_py Inst_sbin Inst_bin Inst_libexec Use_getent_yes              \
         Use_argparse_$(USE_ARGPARSE) build_compiled inst_obfuscate 
	@if test "$(SITE_CONTROLLED_PREFIX)" = "no" ; then                                         \
	  echo $(RM) $(DESTDIR)$(PKG);                                                             \
	       $(RM) $(DESTDIR)$(PKG);                                                             \
	  echo ln -s $(VERSION) $(DESTDIR)$(PKG);                                                  \
	       ln -s $(VERSION) $(DESTDIR)$(PKG);                                                  \
        else                                                                                       \
	  echo '**************************************************************';  		   \
          echo '';                                                                		   \
          echo 'Warning: remember to set the XALT_DIR env. var to: $(PKG)';       		   \
          echo '';                                                                		   \
	  echo '**************************************************************';  		   \
        fi;

build_compiled: 
	cd src;                                                                                    \
        $(MAKE) LD_PRELOAD= XALT_EXECUTABLE_TRACKING= PARENT_DIR=$(abs_srcdir) DESTDIR=$(DESTDIR)  \
                LDFLAGS="$(LDFLAGS)" LIBEXEC=$(LIBEXEC) SBIN=$(SBIN) BIN=$(BIN)  LIB=$(LIB)        \
                LIB64=$(LIB64) HAVE_32BIT=$(HAVE_32BIT) OPTLVL="$(OPTLVL)" HAVE_DCGM=$(HAVE_DCGM)  \
                HAVE_LIBUUID=$(HAVE_LIBUUID) HAVE_NVML=$(HAVE_NVML) STATIC_LIBS=$(STATIC_LIBS)     \
                XALT_FILE_PREFIX=$(XALT_FILE_PREFIX) MY_HOSTNAME_PARSER=$(MY_HOSTNAME_PARSER)      \
                CRYPTO_STR=$(CRYPTO_STR) UUID_STR=$(UUID_STR) CURL_STR=$(CURL_STR)                 \
                XALT_LOGGING_URL=$(XALT_LOGGING_URL) SITE_PKG_DIR=$(SITE_PKG_DIR)                  \
                GPU_STR=$(GPU_STR) PY_BUILD_TOOLS=$(abs_srcdir)/proj_mgmt/py_build_tools           \
	        EXTRA_FLAGS=$(EXTRA_FLAGS) MODE_X=$(MODE_X) MODE_R=$(MODE_R)                       \
                all
	if test $(XALT_CONTAINER_SUPPORT) = yes; then                                              \
          sudo apptainer build xalt.sif xalt_container.def;                                        \
          apptainer run -B .:/work xalt.sif;                                                       \
          CWD=$$PWD; cd $(DESTDIR)$(XALT_CONTAINER_LIBS); tar xf $$CWD/xalt_libs.tgz;              \
        fi

inst_obfuscate:
	install -m $(MODE_R) $(OBFUSCATE_HDR)   $(DESTDIR)$(INC)

echo:
	@echo srcdir: $(srcdir)
	@echo CURDIR: $(CURDIR)
	@echo abs_srcdir: $(abs_srcdir)
	@echo MAKE: $(MAKE)
	@echo MAKEFLAGS: $(MAKEFLAGS)
	@echo MAKEFILE_LIST: $(MAKEFILE_LIST)

$(DIRLIST) :
	install -d -m $(MODE_X) $@

LINKS: $(DIRLIST)
	cd $(DESTDIR)$(LIB);                        \
        rm -f x86_64-linux-gnu i386-linux-gnu;      \
        ln -s ../lib64 x86_64-linux-gnu;            \
        ln -s . i386-linux-gnu

Inst_site_py: $(DESTDIR)$(SITE_PKG_DIR)
	install -m $(MODE_R) $(SITE_PKG) $(DESTDIR)$(SITE_PKG_DIR)/sitecustomize.py

Inst_libexec: $(LIBEXEC_PKG) $(DESTDIR)$(LIBEXEC)
	$(MAKE) -f $(CURRENT_MK) $(MAKEFLAGS) FILELIST="$(LIBEXEC_PKG)" DIRLOC=$(DESTDIR)$(LIBEXEC) GIT_VERSION="$(GIT_VERSION)" __installMe

Inst_sbin: $(SBIN_PKG) $(DESTDIR)$(SBIN)
	$(MAKE) -f $(CURRENT_MK) $(MAKEFLAGS) FILELIST="$(SBIN_PKG)"    DIRLOC=$(DESTDIR)$(SBIN)    GIT_VERSION="$(GIT_VERSION)" __installMe

Inst_bin: $(BIN_PKG) $(DESTDIR)$(BIN)
	$(MAKE) -f $(CURRENT_MK) $(MAKEFLAGS) FILELIST="$(BIN_PKG)"     DIRLOC=$(DESTDIR)$(BIN)     GIT_VERSION="$(GIT_VERSION)" __installMe

Inst_TACC: $(TACC_PKG) $(DESTDIR)$(SBIN)
	$(MAKE) -f $(CURRENT_MK) $(MAKEFLAGS) FILELIST="$(TACC_PKG)"    DIRLOC=$(DESTDIR)$(SBIN)    GIT_VERSION="$(GIT_VERSION)" __installMe

Inst_RT: $(RT_PKG) $(DESTDIR)$(SBIN)
	$(MAKE) -f $(CURRENT_MK) $(MAKEFLAGS) FILELIST="$(RT_PKG)"      DIRLOC=$(DESTDIR)$(SBIN)    GIT_VERSION="$(GIT_VERSION)" __installMe


Use_getent_yes:
	cd $(srcdir)/contrib;                                             \
        install -m $(MODE_X) -d  $(DESTDIR)$(PKGV)/libexec/getent;        \
        install -m $(MODE_R) getent/*.py $(DESTDIR)$(PKGV)/libexec/getent


Use_argparse_no:

Use_argparse_yes: $(srcdir)/contrib/argparse/argparse.py
	$(MAKE) $(MAKEFLAGS) -f $(CURRENT_MK) FILELIST="$^" DIRLOC=$(DESTDIR)$(LIBEXEC) GIT_VERSION="$(GIT_VERSION)" __installMe

__installMe:
	-for i in $(FILELIST); do                                     	   	  \
           bareN=$${i##*/};                                           	   	  \
           fn=$${bareN%%.in*};                                        	   	  \
	   ext=$${bareN#$$fn.} 	                                            	  \
           oext=;                                                          	  \
	   : echo "bareN: $$bareN, ext: $$ext";                            	  \
           [ "$$ext" = "in.py" ] && oext=".py";                            	  \
           [ "$$ext" = "in.c" ]  && oext=".c";                             	  \
           sed  -e 's|@PREFIX@|$(prefix)|g'                            	   	  \
	        -e 's|@etc_dir@|$(ETC_DIR)|g'                              	  \
	        -e 's|@syslog_msg_sz@|$(SYSLOG_MSG_SZ)|g'                  	  \
	        -e 's|@xalt_ld_library_path@|$(XALT_LD_LIBRARY_PATH)|g'           \
	        -e 's|\@git\@|$(GIT_VERSION)|g'                              	  \
	        -e 's|@have_working_libuuid@|$(HAVE_LIBUUID)|g'            	  \
	        -e 's|@have_dcgm@|$(HAVE_DCGM)|g'                       	  \
	        -e 's|@have_nvml@|$(HAVE_NVML)|g'                       	  \
	        -e 's|@path_to_mktemp@|$(PATH_TO_MKTEMP)|g'                  	  \
	        -e 's|@path_to_pstree@|$(PATH_TO_PSTREE)|g'                	  \
	        -e 's|@path_to_logger@|$(PATH_TO_LOGGER)|g'                	  \
	        -e 's|@site_name@|$(SITE_NAME)|g'                          	  \
	        -e 's|@preload_only@|$(PRELOAD_ONLY)|g'                       	  \
	        -e 's|@transmission@|$(TRANSMISSION)|g'                    	  \
	        -e 's|@version@|$(VERSION)|g'                              	  \
	        -e 's|@xalt_dir@|$(XALT_DIR)|g'                 	   	  \
	        -e 's|@xalt_system_path@|$(XALT_SYSTEM_PATH)|g'       	   	  \
	        -e 's|@my_hostname_parser@|$(MY_HOSTNAME_PARSER)|g'               \
	        -e 's|@xalt_install_os@|$(XALT_INSTALL_OS)|g'                     \
	        -e 's|@xalt_function_tracking@|$(XALT_FUNCTION_TRACKING)|g'       \
	        -e 's|@xalt_config_py@|$(XALT_CONFIG_PY)|g' 	   	   	  \
	        -e 's|@xalt_libexec_dir@|$(LIBEXEC)|g'                     	  \
	        -e 's|@xalt_tracking_mpi_only@|$(TRACKING_MPI_ONLY)|g'     	  \
	        -e 's|@xalt_site_dir@|$(SITE)|g'                           	  \
	        -e 's|@xalt_file_prefix@|$(XALT_FILE_PREFIX)|g'            	  \
	        -e 's|@xalt_logging_url@|$(XALT_LOGGING_URL)|g'            	  \
	        -e 's|@xalt_prime_number@|$(XALT_PRIME_NUMBER)|g'            	  \
	        -e 's|@xalt_prime_fmt@|$(XALT_PRIME_FMT)|g'             	  \
	        -e 's|@xalt_enable_backgrounding@|$(ENABLE_BACKGROUNDING)|g'      \
                           < $$i > $(DIRLOC)/$$fn$$oext;                   	  \
	        chmod $(MODE_R)     $(DIRLOC)/$$fn$$oext;                         \
            [ "$$ext" = "in" -o "$$ext" = "in.py" ] &&                            \
               chmod $(MODE_X) $(DIRLOC)/$$fn$$oext;                          	  \
	    true;                                                          	  \
        done

world_update:
	@cd $(srcdir)                                                                         ; \
	git status -s > /tmp/git_st_$$$$                                     		      ; \
        if [ -s /tmp/git_st_$$$$ ]; then                                      		        \
            echo "All files not checked in => try again"                      		      ; \
	elif [ $(srcdir)/configure -ot $(srcdir)/configure.ac ]; then         		        \
            echo "configure is out of date => try again"                      		      ; \
        else                                                                  		        \
	    branchName=`git status | head -n 1 | sed 's/^[# ]*On branch //g'` 		      ; \
            git push        github     $$branchName                           		      ; \
            git push --tags github     $$branchName                           		      ; \
        fi                                                                    		      ; \
        rm -f /tmp/git_st_$$$$


gittag:
        ifneq ($(TAG),)
	  @cd $(srcdir)                                                             ; \
	  git status -s > /tmp/git_st_$$$$                                          ; \
	  my_tag=`expr substr $(TAG) 1 5`                                           ; \
	  if [ -s /tmp/git_st_$$$$ ]; then         	                              \
	    echo "All files not checked in => try again"                            ; \
          elif [ $$my_tag != "xalt-" ]; then                                          \
            echo                                                                    ; \
            echo "TAG needs to be in the form: xalt-#.##.##  => try again"          ; \
            echo                                                                    ; \
	  elif [ $(srcdir)/configure -ot $(srcdir)/configure.ac ]; then               \
            echo "configure is out of date => try again"                            ; \
	  else                                                             	      \
            vtag=$(TAG)                                                             ; \
            vtag="$${vtag#xalt-}"                                                   ; \
	    echo "#define XALT_VERSION_STR \"XALT $$vtag $(VDATE)\"" > $(XALT_V)    ; \
	    echo "$$vtag"                                            > $(DOT_V)     ; \
            $(UPDATE_VERSION) -p $(CONF_PY_PATTERN)   --version $$vtag $(CONF_PY)   ; \
            $(UPDATE_VERSION) -p $(XALT_SPEC_PATTERN) --version $$vtag $(XALT_SPEC) ; \
            git commit -m "moving to TAG_VERSION $(TAG)" $(XALT_SPEC)  $(CONF_PY)     \
                                                         $(XALT_V)     $(DOT_V)     ; \
            git tag -a $(TAG) -m 'Setting TAG_VERSION to $(TAG)'                    ; \
	    branchName=`git status | head -n 1 | sed 's/^[# ]*On branch //g'`       ; \
            git push        origin $$branchName                                     ; \
	    git push --tags origin $$branchName                                     ; \
          fi                                                                        ; \
          rm -f /tmp/git_st_$$$$
        else
	  @echo "To git tag do: make gittag TAG=?"
        endif


tags:  build_tags
	$(RM) file_list.*

build_tags:
	$(RM) file_list.*
	cd $(srcdir); find . \( -regex '.*~$$\|.*/\.git\|.*/\.git/' -prune \)  \
               -o -type f > ./my_build/file_list.1
	sed                                                      \
	    -e 's|./my_build/.*||g'                              \
            -e 's|.*/.git.*||g'                                  \
            -e 's|.*/rt/.*/t1/.*||g'                             \
            -e 's|./TAGS||g'                                     \
            -e 's|.*/epydoc/.*$$||g'                             \
            -e 's|.*/old/.*$$||g'                                \
            -e 's|.*/job_launcher/.*$$||g'                       \
            -e 's|.*/stamp-h1$$||g'                              \
            -e 's|.*/__build__.*$$||g'                           \
            -e 's|.*/stamp-h$$||g'                               \
            -e 's|.*/makefile||g'                                \
            -e 's|.*/module.mk||g'                               \
            -e 's|.*/.gdb_history||g'                            \
            -e 's|.*/configure$$||g'                             \
            -e 's|.*/.DS_Store$$||g'                             \
            -e 's|.DS_Store$$||g'                                \
            -e 's|.*\.tgz$$||g'                                  \
            -e 's|.*\.d$$||g'                                    \
            -e 's|.*/install$$||g'                               \
            -e 's|.*/xalt_syshost.c$$||g'                        \
            -e 's|.*/xalt_env_parser.lex||g'                     \
            -e 's|.*/xalt_regex.h$$||g'                          \
            -e 's|.*/xalt_config.h$$||g'                         \
            -e 's|.*/uuid_config.h$$||g'                         \
            -e 's|.*\.tar\.gz$$||g'                              \
            -e 's|.*\.tar\.bz2$$||g'                             \
            -e 's|.*/libuuid.a$$||g'                             \
            -e 's|.*\.so$$||g'                                   \
            -e 's|.*/my_uuidgen$$||g'                            \
            -e 's|.*\.pptx$$||g'                                 \
            -e 's|.*\.png$$||g'                                  \
            -e 's|.*\.jpg$$||g'                                  \
            -e 's|.*/docs/build/.*$$||g'                         \
            -e 's|.*\.o32$$||g'                                  \
            -e 's|.*\.d32$$||g'                                  \
            -e 's|.*\.pyc$$||g'                                  \
            -e 's|.*\.pyo$$||g'                                  \
            -e 's|.*\.csv$$||g'                                  \
	    -e 's|.*\.aux$$||g'                                  \
	    -e 's|.*\.fdb_latexmk$$||g'                          \
	    -e 's|.*\.fls$$||g'                                  \
	    -e 's|.*\.key$$||g'                                  \
	    -e 's|.*\.nav$$||g'                                  \
	    -e 's|.*\.out$$||g'                                  \
	    -e 's|.*\.pdf$$||g'                                  \
	    -e 's|.*\.snm$$||g'                                  \
	    -e 's|.*\.toc$$||g'                                  \
	    -e 's|.*\.vrb$$||g'                                  \
	    -e 's|.*syslogTest$$||g'                             \
            -e 's|.*/build_uuid_32/.*$$||g'                      \
            -e 's|.*/build_uuid_64/.*$$||g'                      \
	    -e 's|.*\/\.libs/.*$$||g'                            \
	    -e 's|.*\/\.deps/.*$$||g'                            \
            -e 's|./file_list\..*||g'                            \
            -e 's|.*\.o$$||g'                                    \
            -e 's|.*\.lo$$||g'                                   \
            -e 's|.*\.Plo$$||g'                                  \
            -e 's|^#.*||g'                                       \
            -e 's|.*/#.*||g'                                     \
            -e 's|\.#.*||g'                                      \
            -e 's|.*\.pdf$$||g'                                  \
            -e 's|.*\.used$$||g'                                 \
            -e 's|./.*\.log$$||g'                                \
            -e 's|./testreports/.*||g'                           \
	    -e 's|.*/lex.*\.c||g'                                \
            -e 's|.*/config\.status$$||g'                        \
            -e 's|.*\~$$||g'                                     \
            -e '/^\s*$$/d'                                       \
	       < file_list.1 > file_list.2
	@wc -l file_list.1
	@wc -l file_list.2
	cd $(srcdir); etags -o TAGS `cat ./my_build/file_list.2`

dist:
	cd $(srcdir)                                                                        ; \
	GIT_BRANCH=`git status | head -n 1 | sed -e 's/^[# ]*On branch //g' -e 's/^[# ]*HEAD detached at//g'`; \
	git archive --prefix=$(TAR_VERSION)/ $$GIT_BRANCH > $(TAR_VERSION).tar              ; \
	$(RM) -rf DIST                                                                      ; \
	mkdir DIST                                                                          ; \
        cd DIST                                                                             ; \
        tar xf ../$(TAR_VERSION).tar                                                        ; \
	find $(TAR_VERSION) -type f -print0 | xargs -0 sed -i 's/\@git\@/$(GIT_VERSION)/g'  ; \
        $(RM) ../$(TAR_VERSION).tar                                                         ; \
	tar cjf ../$(TAR_VERSION).tar.bz2   $(TAR_VERSION)                                  ; \
	cd ..                                                                               ; \
	$(RM) -rf DIST                                                                      ; 


SUBMAKEFILES := src/makefile src/util/module.mk src/libxalt/module.mk src/linker/module.mk

makefile : $(srcdir)/Makefile.in config.status $(SUBMAKEFILES)
	./config.status $@

src/makefile: $(srcdir)/src/Makefile.in config.status
	./config.status $@

src/util/module.mk: $(srcdir)/src/util/Module.mk.in config.status
	./config.status $@
src/linker/module.mk: $(srcdir)/src/linker/Module.mk.in config.status
	./config.status $@
src/libxalt/module.mk: $(srcdir)/src/libxalt/Module.mk.in config.status
	./config.status $@


neat:
	cd $(srcdir);                                                                       \
	$(RM) *~;                                                                           \
	cd src ;         LD_PRELOAD= XALT_EXECUTABLE_TRACKING=                              \
                         $(MAKE) PARENT_DIR=$(srcdir) DESTDIR=$(DESTDIR) LIBEXEC=$(LIBEXEC) \
                         HAVE_32BIT=$(HAVE_32BIT) LIB=$(LIB) LIB64=$(LIB64) $@
clean:  neat
	cd $(srcdir);                                                                       \
	cd src ;         LD_PRELOAD= XALT_EXECUTABLE_TRACKING=                              \
                         $(MAKE) PARENT_DIR=$(srcdir) DESTDIR=$(DESTDIR) LIBEXEC=$(LIBEXEC) \
                         HAVE_32BIT=$(HAVE_32BIT) LIB=$(LIB) LIB64=$(LIB64) $@
clobber: clean
	cd $(srcdir);                                                                       \
	cd src ;         LD_PRELOAD= XALT_EXECUTABLE_TRACKING=                              \
                         $(MAKE) PARENT_DIR=$(srcdir) DESTDIR=$(DESTDIR) LIBEXEC=$(LIBEXEC) \
                         HAVE_32BIT=$(HAVE_32BIT) LIB=$(LIB) LIB64=$(LIB64) $@
