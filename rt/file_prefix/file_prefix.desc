# -*- python -*-

test_name = "file_prefix"
test_descript = {
   'description' : "file_prefix test",
   'keywords'    : [test_name,],

   'active'      : True,
   'test_name'   : test_name,

   'run_script'  : """
     . $(projectDir)/rt/common_funcs.sh

     initialize

     export XALT_TRANSMISSION_STYLE="file_separate_dirs"
     export XALT_FILE_PREFIX=$outputDir/DATA 

     installXALT --with-syshostConfig=nth_name:2 --with-primeNumber=11 \
                 --with-transmission=$XALT_TRANSMISSION_STYLE          \
                 --with-xaltFilePrefix=$XALT_FILE_PREFIX
     displayThis "buildRmapT"
     buildRmapT

     export PROMPT_COMMAND2="printf '\033k${formed_hostname}\033\\';"
     PATH=$outputDir/XALT/xalt/xalt/bin:$outputDir/XALT/xalt/xalt/sbin:$(testDir)/bin:$PATH;

     displayThis "installDB"
     installDB 

     rm -rf get_XALT_env hello* hybrid_daxpy map.log omp_pi results.csv DATA

     create_xalt_directories.sh

     displayThis "module commands"
     module --quiet load gcc mpich
     module list
     XALT_BIN=$outputDir/XALT/xalt/xalt/bin
     PATH="$XALT_BIN:$outputDir/XALT/xalt/xalt/sbin:$outputDir/xalt tools:$PATH";

     export COMPILER_PATH=$XALT_BIN
     export SBATCH_ACCOUNT=rtm
     export SLURM_JOB_ID=12345
     export XALT_EXECUTABLE_TRACKING=yes
     export XALT_PRELOAD_ONLY=yes
     export LD_PRELOAD=$outputDir/XALT/xalt/xalt/lib64/libxalt_init.so
   

     displayThis  "mpicc -o hello\\ .mpi $(projectDir)/rt/mpi_hello_world.c"
     mpicc -o hello\\ .mpi $(projectDir)/rt/mpi_hello_world.c 

     displayThis "mpirun -n 1 ./hello\\ .mpi"
     mpirun -n 1 ./hello\\ .mpi 
     
     displayThis "XALT_TRACING=yes ./hello\\ .mpi"
     XALT_TRACING=yes ./hello\\ .mpi 
     
     displayThis "test_record_pkg"
     cp $(outputDir)/XALT/xalt/xalt/libexec/test_record_pkg test_record_pkg_00
     ./test_record_pkg_00
   
     unset LD_PRELOAD

     SYSHOST=`xalt_syshost`
     displayThis "SYSHOST: $SYSHOST"

     displayThis "xalt_file_to_db.py"
     xalt_file_to_db.py  --syshost $SYSHOST --confFn $DB_CONF_FN --reverseMapD $outputDir/reverseMapD

     displayThis  "check_entries_db.py"
     check_entries_db.py --dbname $DBNAME --results results.csv --functions 4 --links 1 --runs 3 --pkgs 3 --uuid 1
     finishTest -o $(resultFn) -t $(runtimeFn) results.csv
     if [ -f results.csv ]; then
       STATUS=`cat results.csv`; 
     else
       STATUS=failed
     fi
     echo; echo STATUS=$STATUS; echo
   """,

   'tests' : [
      { 'id' : 't1', 'tol' : 1.01e-6},
   ],
}
