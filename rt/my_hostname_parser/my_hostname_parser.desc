# -*- python -*-

test_name = "my_hostname_parser"
test_descript = {
   'description' : "End to end test",
   'keywords'    : [ "simple", test_name,],

   'active'      : True,
   'test_name'   : test_name,

   'run_script'  : """
     . $(projectDir)/rt/common_funcs.sh

     rm -rf libhost.a host.o keep.o hello* results.csv LOG

     initialize

     gcc -m32 -I$(projectDir)/src/util -o host_32.o -c $(testDir)/host.c
     if [ -f host_32.o ]; then
         gcc -m32 -fPIC -o keep_32.o -c $(testDir)/keep.c 
         ar cr libhost_32.a host_32.o keep_32.o
         LIBHOST_32=":$(outputDir)/libhost_32.a"
     fi
     gcc -fPIC -I$(projectDir)/src/util -c $(testDir)/host.c
     gcc -fPIC -c $(testDir)/keep.c
   
     ar cr libhost.a host.o keep.o

     installXALT --with-hostnameParser=library:$(outputDir)/libhost.a$LIBHOST_32 --with-xaltFilePrefix=$(outputDir)/LOG --with-syshostConfig=nth_name:2 --with-containerSupport=no
     XALT_BIN=$outputDir/XALT/xalt/xalt/bin
     PATH=$outputDir/XALT/xalt/xalt/bin:$outputDir/XALT/xalt/xalt/sbin:$(testDir)/bin:$XALT_BIN:$PATH;
   
     displayThis "buildRmapT"
     buildRmapT

     displayThis "installDB"
     installDB 


     displayThis "module commands"
     module --quiet load gcc mpich
     module list

     export COMPILER_PATH=$XALT_BIN
     export SBATCH_ACCOUNT=rtm
     export SLURM_JOB_ID=12345
     export XALT_EXECUTABLE_TRACKING=yes
     export LD_PRELOAD=$outputDir/XALT/xalt/xalt/lib64/libxalt_init.so


     displayThis  "mpicc -o hello $(projectDir)/rt/mpi_hello_world.c"
     mpicc -o hello $(projectDir)/rt/mpi_hello_world.c 

     displayThis "mpirun -n 1 ./hello"
     mpirun -n 1 ./hello 

     unset LD_PRELOAD
     export XALT_USERS="$USER"

     displayThis "xalt_file_to_db.py"
     xalt_file_to_db.py  --confFn $DB_CONF_FN --reverseMapD $outputDir/reverseMapD

     displayThis  "check_entries_db.py"
     check_entries_db.py --dbname $DBNAME --results results.csv --runs 1 --functions 4 --links 1 --objects 6 --uuid 1
     finishTest -o $(resultFn) -t $(runtimeFn) results.csv
     if [ -f results.csv ]; then
       STATUS=`cat results.csv`; 
     else
       STATUS=failed
     fi
     echo; echo STATUS=$STATUS; echo
   """,

   'tests' : [
      { 'id' : 't1', 'tol' : 1.01e-6},
   ],
}
